name: Deploy to Amazon ECS

on:
  workflow_call:
    inputs:
      AWS_REGION:
        description: "AWS region (e.g. us-west-1)"
        type: string
        required: true
      ECR_REPOSITORY:
        description: "Amazon ECR repository name"
        type: string
        required: true
      ECS_SERVICE:
        description: "Amazon ECS service name" 
        type: string
        required: true
      ECS_CLUSTER:
        description: "Amazon ECS cluster name"
        type: string
        required: true
      ECS_TASK_DEFINITION:
        description: "Path to Amazon ECS task definition file"
        type: string
        required: true
      CONTAINER_NAME:
        description: "Name of the container in task definition"
        type: string
        required: true
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

env:
  AWS_REGION: ${{ inputs.AWS_REGION }}
  ECR_REPOSITORY: ${{ inputs.ECR_REPOSITORY }}
  ECS_SERVICE: ${{ inputs.ECS_SERVICE }}
  ECS_CLUSTER: ${{ inputs.ECS_CLUSTER }}
  ECS_TASK_DEFINITION: ${{ inputs.ECS_TASK_DEFINITION }}
  CONTAINER_NAME: ${{ inputs.CONTAINER_NAME }}
permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Get ECS task definition
      id: task-definition
      run: |
        echo "task-definition=$(aws ecs describe-task-definition \
        --task-definition ${{ env.ECS_TASK_DEFINITION }} \
        --query taskDefinition \
        --output json)" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
